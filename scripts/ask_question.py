from aiogram import types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime

CHAT_ID = os.environ['CHAT_ID']

class Form(StatesGroup):
    waiting_for_ask = State()
    waiting_for_answer = State()

async def ask_question_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.bot.edit_message_text(
            text="*üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!*\n\n–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.answer(
            "*üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!*\n\n–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!", parse_mode='markdown'
        )
    
    await state.set_state(Form.waiting_for_ask)

async def process_ask(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_username = message.from_user.username
    question_text = message.text
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    await state.update_data(question=question_text, user_id=user_id)
    
    await message.answer(
        f"*–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {user_username},*\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "*–° —É–≤–∞–∂–µ–Ω–∏–µ–º,* \n*Sparkle Market*",
        parse_mode='Markdown'
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[ 
        InlineKeyboardButton(text='‚ùó –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'answer_{user_id}')
    ]])

    message_text = (f"*üìã –í–æ–ø—Ä–æ—Å:* {question_text}\n\n"
                    f"*‚ùì –û—Ç:* @{user_username}\n\n"
                    f"*üïî –î–∞—Ç–∞:* {current_time}")

    try:
        await message.bot.send_message(
            chat_id=CHAT_ID,
            text=message_text,
            parse_mode="Markdown",
            reply_markup=kb
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return

async def answer_question_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback_query.data.split('_')[1])
        await callback_query.message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å.")
        await state.set_state(Form.waiting_for_answer)
        await state.update_data(answering_user_id=user_id)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

async def process_answer(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    answering_user_id = user_data.get('answering_user_id')

    if answering_user_id:
        try:
            await message.bot.send_message(
                answering_user_id,
                f"*–ü—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:*\n\n{message.text}",
                parse_mode="Markdown"
            )
            await message.bot.send_message(
                CHAT_ID,
                f"–û—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.from_user.username}.",
                parse_mode="Markdown"
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")
