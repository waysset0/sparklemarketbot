from aiogram import types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import os

CHAT_ID = os.environ['CHAT_ID']
SUPPORT = os.environ['SUPPORT']

class Form(StatesGroup):
    waiting_for_tz = State()
    waiting_for_price = State()

async def order_service_handler(callback_query: types.CallbackQuery, state: FSMContext):
    message_text = "*–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üéâ*\n\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π."
    
    if callback_query.message.text:
        try:
            await callback_query.bot.edit_message_text(
                text=message_text,
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="Markdown"
            )
        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    else:
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=message_text,
            parse_mode="Markdown"
        )
    
    await state.set_state(Form.waiting_for_tz)

async def process_tz(message: types.Message, state: FSMContext):
    await state.update_data(tz=message.text)
    await state.set_state(Form.waiting_for_price)
    await message.answer(
        ("*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ!*\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–Ω—É, –∫–æ—Ç–æ—Ä—É—é –í—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª–∏—Ç—å –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è."), 
        parse_mode='markdown')

async def process_price(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    tz = user_data.get('tz')
    price = message.text
    user_id = message.from_user.id

    try:
        price = int(price)
    except ValueError:
        await message.answer("*–û—à–∏–±–∫–∞:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", parse_mode='markdown')
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[[ 
        InlineKeyboardButton(text='‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f'approve_{user_id}'),
        InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'reject_{user_id}'),
    ]])

    message_text = (f"*üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:* {tz}\n\n"
                    f"*üí∞ –¶–µ–Ω–∞:* {price}\n\n"
                    f"*‚ùì –û—Ç:* @{message.from_user.username}\n\n"
                    f"*üïî –î–∞—Ç–∞:* {current_time}")

    try:
        await message.bot.send_message(
            chat_id=CHAT_ID,
            text=message_text,
            parse_mode="Markdown",
            reply_markup=kb
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return

    await message.answer(
        (f"*–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {message.from_user.username},*\n\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n\n"
        "–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ –±—É–¥–µ–º –¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n\n"
        "*–° —É–≤–∞–∂–µ–Ω–∏–µ–º,*\n*Sparkle Market*"),
        parse_mode='markdown')

async def process_approve(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split('_')[1]

    try:
        await callback_query.bot.send_message(chat_id=user_id, text=f"*‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {SUPPORT} –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", parse_mode='markdown')
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
            reply_to_message_id=callback_query.message.message_id,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def process_reject(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split('_')[1]

    try:
        await callback_query.bot.send_message(chat_id=user_id, text="üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ *–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è, –ø–∏—à–∏—Ç–µ –Ω–∞–º!")
        await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!",
            reply_to_message_id=callback_query.message.message_id,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
